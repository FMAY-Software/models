-- BP 7.1.6 content: Package syschar: 3 persistence-version: 7.1.6

INSERT INTO EP_PKG
	VALUES ("335cce5c-4a87-414a-9cf5-29925e9dd979",
	"00000000-0000-0000-0000-000000000000",
	"43a51b71-02de-494b-83f2-ec07c5b339f4",
	'Functions',
	'',
	0);
INSERT INTO S_SYNC
	VALUES ("b53438c9-fb94-42c9-b025-52ebd53721ee",
	"00000000-0000-0000-0000-000000000000",
	'test_realtime_requirements',
	'',
	'
// TA2
TIM::set_epoch( year:2020, month:1, day:1 );

// TA3
t1 = TIM::current_clock();
t2 = TIM::current_clock();
t3 = TIM::current_seconds();
LOG::LogTime( message:"is TIM::current_clock() value(t1)(microseconds).", t:t1 );
LOG::LogTime( message:"is TIM::current_clock() value(t2)(microseconds).", t:t2 );
LOG::LogTime( message:"is TIM::current_seconds() value(t3)(seconds).", t:t3 );
timestamp1_string = TIM::timestamp_to_string( timestamp:t1 );
timestamp2_string = TIM::timestamp_to_string( timestamp:t2 );
LOG::LogInfo( message:"t1 timestamp: " + timestamp1_string );
LOG::LogInfo( message:"t2 timestamp: " + timestamp2_string );

// TA4
epochtime_string = TIM::timestamp_format( ts:t1, format:"yyyy/MM/dd hh:mm:ss" );
LOG::LogInfo( message:"t1 timestamp formatted as yyyy/MM/dd hh:mm:ss: " + epochtime_string );

// TA5
if (t1 < t2) or (t1 > t2) or (t1 <= t2) or (t1 >= t2) or (t1 != t2) or (t1 == t2)
else
  LOG::LogFailure( message:"TIM timestamp comparison failure!" );
end if;

// TA6
datetime_minus_datetime = t2 - t1;
LOG::LogTime( message:"is t2 - t1(in microseconds).", t:datetime_minus_datetime );
if ( datetime_minus_datetime >= t2 )
  LOG::LogFailure( message:"TIM timestamp subtract timestamp failure!" );
end if;

// TA7
datetime_plus_duration = t2 + 1;
LOG::LogTime( message:"is t2 + 1.", t: datetime_plus_duration);
if ( datetime_plus_duration == t2 )
  LOG::LogFailure( message:"TIM timestamp add duration failure!" );
end if;

// TA8
datetime_minus_duration = t2 - 1;
LOG::LogTime( message:"is t2 - 1.", t: datetime_minus_duration);
if ( datetime_minus_duration == t2 )
  LOG::LogFailure( message:"TIM timestamp subtract duration failure!" );
end if;

// TA9
time_since_midnight = TIM::time_of_day( timeval:t1 );
LOG::LogTime( message:"is microsecond time since midnight of t1.", t: time_since_midnight );
LOG::LogTime( message:"hours.", t: ((time_since_midnight / 1000) / 1000) / 3600 );
LOG::LogTime( message:"minutes.", t: (((time_since_midnight / 1000) / 1000) % 3600) / 60 );
LOG::LogTime( message:"seconds.", t: ((((time_since_midnight / 1000) / 1000) % 3600) % 60) % 60 );
LOG::LogTime( message:"subseconds.", t: time_since_midnight % 1000000 );
if ( time_since_midnight == t1 )
  LOG::LogFailure( message:"TIM::time_of_day failure!" );
end if;

// TA10 this model

// The following demonstrate weaknesses in the existing date bridges.
d1 = TIM::current_date(); // existing bridge returning Date
// d1 = d1 + 1; does not parse
d2 = TIM::current_date(); // existing bridge returning Date
if (d1 < d2) or (d1 > d2) or (d1 <= d2) or (d1 >= d2) or (d1 != d2) or (d1 == d2)
else
  LOG::LogFailure( message:"TIM date comparison failure!" );
end if;

',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("b53438c9-fb94-42c9-b025-52ebd53721ee",
	1,
	"335cce5c-4a87-414a-9cf5-29925e9dd979",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("a2693ebc-15e2-44f0-9ab1-a0a66dddb840",
	"00000000-0000-0000-0000-000000000000",
	'testEpochUser',
	'',
	'create object instance baby of MME;
LOG::LogInfo( message:"Birthday before epoch set: " + baby.myString );
TIM::set_epoch( day:21, month:6, year:2111 );
create object instance epochBaby of MME;
LOG::LogInfo( message:"Birthday after epoch set: " + epochBaby.myString );',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("a2693ebc-15e2-44f0-9ab1-a0a66dddb840",
	1,
	"335cce5c-4a87-414a-9cf5-29925e9dd979",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO S_SYNC
	VALUES ("866e0c01-eced-4011-a019-0e4108a806dc",
	"00000000-0000-0000-0000-000000000000",
	'test_simulation_requirements',
	'',
	'// TA11 - These functions are for simulated time usage
t1 = TIM::set_time( year:2020, month:11, day:5, hour:8, minute:0, second:0, microsecond:234567);
LOG::LogTime( message:" is set time.", t:t1 );
dateCheck = TIM::current_date();
if ( ( 2020 != TIM::get_year( date: dateCheck ) ) or ( 11 != TIM::get_month( date: dateCheck ) ) or 
     ( 5 != TIM::get_day( date: dateCheck ) ) or ( 8 != TIM::get_hour( date: dateCheck ) ) )
  LOG::LogFailure( message:"TIM::set_time failure!" );
end if;
sim1_string = TIM::timestamp_to_string( timestamp:t1 );
advance = 60000000;
t2 = TIM::advance_time( microseconds:advance );
sim2_string = TIM::timestamp_to_string( timestamp:t2 );
LOG::LogInfo( message:"TIM::set_time value: " + sim1_string ); 
LOG::LogInfo( message:"TIM::advance_time value: " + sim2_string ); 
if ( ( t2 - t1 ) < advance )
  LOG::LogFailure( message:"advance_time failure!" );
end if;
create object instance me of MME;
// 2020-11-05T08:01:00.234567 + 00:00:30.446782 = 2020-11-05T08:01:30.681349
lifeTime = advance + 30446782;
me.myDeathDay = TIM::create_date( day:10, hour:0, minute:0, month:11, second:0, year:2020 );
create event instance lifeEvent of MME1:live( time_of_life:lifeTime ) to me;
timer1 = TIM::timer_start( event_inst: lifeEvent, microseconds: lifeTime );
',
	"ba5eda7a-def5-0000-0000-000000000000",
	1,
	'',
	0);
INSERT INTO PE_PE
	VALUES ("866e0c01-eced-4011-a019-0e4108a806dc",
	1,
	"335cce5c-4a87-414a-9cf5-29925e9dd979",
	"00000000-0000-0000-0000-000000000000",
	1);
INSERT INTO PE_PE
	VALUES ("335cce5c-4a87-414a-9cf5-29925e9dd979",
	1,
	"00000000-0000-0000-0000-000000000000",
	"9e468b99-6235-49e8-b4c3-26287a2f7f96",
	7);
INSERT INTO C_C_PROXY
	VALUES ("9e468b99-6235-49e8-b4c3-26287a2f7f96",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000",
	'EpochUser',
	'',
	0,
	"00000000-0000-0000-0000-000000000000",
	0,
	'',
	'../EpochUser.xtuml');
INSERT INTO S_SYS_PROXY
	VALUES ("43a51b71-02de-494b-83f2-ec07c5b339f4",
	'EpochTest',
	1,
	'../../../EpochTest.xtuml');
