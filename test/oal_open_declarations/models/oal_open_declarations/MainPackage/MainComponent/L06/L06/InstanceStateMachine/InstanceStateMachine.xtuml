-- BP 7.1.6 content: InstanceStateMachine syschar: 3 persistence-version: 7.1.6

INSERT INTO SM_ISM
	VALUES ("a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"1120006e-eccb-4765-ac1f-4cdbb004e669");
INSERT INTO SM_SM
	VALUES ("a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'',
	0);
INSERT INTO SM_MOORE
	VALUES ("a0527bf6-4b66-48f0-ac4f-22a6e43214f2");
INSERT INTO SM_EVTDI
	VALUES ("74167d81-1397-4967-8e0b-bd954d908d90",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E02',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVTDI
	VALUES ("3e8a9671-fc1d-425d-83ad-6ce157412361",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E04',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"74167d81-1397-4967-8e0b-bd954d908d90");
INSERT INTO SM_EVTDI
	VALUES ("504ad504-6917-480a-8dfa-20986d7626b5",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E07',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"3e8a9671-fc1d-425d-83ad-6ce157412361");
INSERT INTO SM_EVTDI
	VALUES ("3f0c44ef-8b0c-4959-a5d9-127242cd558c",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E11',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"504ad504-6917-480a-8dfa-20986d7626b5");
INSERT INTO SM_EVTDI
	VALUES ("12f4d647-d173-4fb1-81c2-6d9134abaa01",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E13',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"3f0c44ef-8b0c-4959-a5d9-127242cd558c");
INSERT INTO SM_EVTDI
	VALUES ("2b0fe10b-9a35-4dc4-98a6-1c63fd174f50",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E15',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"12f4d647-d173-4fb1-81c2-6d9134abaa01");
INSERT INTO SM_EVTDI
	VALUES ("51eaab18-6113-49f8-91b1-0fcbc4c5f144",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E17',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"2b0fe10b-9a35-4dc4-98a6-1c63fd174f50");
INSERT INTO SM_EVTDI
	VALUES ("1efd07d6-55d2-4ac3-9f20-065d9155ee98",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E19',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"51eaab18-6113-49f8-91b1-0fcbc4c5f144");
INSERT INTO SM_EVTDI
	VALUES ("728c9391-d7fe-42e6-915a-5449a7817b65",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E21',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"1efd07d6-55d2-4ac3-9f20-065d9155ee98");
INSERT INTO SM_EVTDI
	VALUES ("0239b7ce-7815-4d5c-96ac-7cf1c2447d52",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E26',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"728c9391-d7fe-42e6-915a-5449a7817b65");
INSERT INTO SM_EVTDI
	VALUES ("f4eece33-d26f-4de1-af8a-1d43744f4c4e",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E27',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"0239b7ce-7815-4d5c-96ac-7cf1c2447d52");
INSERT INTO SM_EVTDI
	VALUES ("e06030f8-53ab-45cd-99f0-e35484b3ea92",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E28',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"f4eece33-d26f-4de1-af8a-1d43744f4c4e");
INSERT INTO SM_EVTDI
	VALUES ("78a5f5c0-8af9-4170-92e8-43b34cbff441",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E29',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"e06030f8-53ab-45cd-99f0-e35484b3ea92");
INSERT INTO SM_EVTDI
	VALUES ("eee8526e-18f2-47ed-bcce-87a487b1ff72",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	'T11E30',
	'',
	"ba5eda7a-def5-0000-0000-000000000002",
	'',
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"78a5f5c0-8af9-4170-92e8-43b34cbff441");
INSERT INTO SM_LEVT
	VALUES ("3afeb3e5-3389-4bca-b954-870012271f14",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_SEVT
	VALUES ("3afeb3e5-3389-4bca-b954-870012271f14",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_EVT
	VALUES ("3afeb3e5-3389-4bca-b954-870012271f14",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"00000000-0000-0000-0000-000000000000",
	1,
	'event1',
	0,
	'',
	'L061',
	'');
INSERT INTO SM_STATE
	VALUES ("904bf884-6eec-454f-a90e-c4f46350a326",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"00000000-0000-0000-0000-000000000000",
	'L06',
	1,
	0);
INSERT INTO SM_SEME
	VALUES ("904bf884-6eec-454f-a90e-c4f46350a326",
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_NSTXN
	VALUES ("d142f76c-e208-4135-aac7-d1e0ebd4aba0",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"904bf884-6eec-454f-a90e-c4f46350a326",
	"3afeb3e5-3389-4bca-b954-870012271f14",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_TXN
	VALUES ("d142f76c-e208-4135-aac7-d1e0ebd4aba0",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"904bf884-6eec-454f-a90e-c4f46350a326",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO SM_MOAH
	VALUES ("cdec6c78-ae58-46a1-8a8c-da29e7296526",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"904bf884-6eec-454f-a90e-c4f46350a326");
INSERT INTO SM_AH
	VALUES ("cdec6c78-ae58-46a1-8a8c-da29e7296526",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2");
INSERT INTO SM_ACT
	VALUES ("cdec6c78-ae58-46a1-8a8c-da29e7296526",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	1,
	'// This same OAL block is reproduced for every possoble Location(L) (Action body home)
// called out in the test matrix.

// This block is just reproduced from the matrix to aide the reader.
//
// Type(T)
//01. T01 E01 variable
//02. Class Key letters  
//03. Functions    
//04. External Entities Key letters  
//05. Ports  
//06. Event specifications  
//07. Operations  
//08. Bridges  
//09. Interface operations  
//10. Interface signals  
//11. Parameters  
//12. Association number  
//13. Attributes  
//
//Expression(E)                                                                                                                                        
//01. Assignment Left Hand Side  - T01, T11, T13                                                                                                           
//02. Assignment Right Hand Side  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                              
//03. Select From Instances  - T01, T02                                                                                                                
//04. Select From Instances Where Clause  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                      
//05. Create Instance  - T01, T02                                                                                                                      
//06. Select Related  - T01, T02, T12                                                                                                                  
//07. Select Related Where Clause  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                             
//08. Create No Variable  - T02                                                                                                                        
//09. Create Event Statement  - T01, T02, T06                                                                                                     
//10. Operation Invocation  - T02, T07                                                                                                                 
//11. Operation Parameter Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                               
//12. Generate Statement  - T01, T02, T06, T13                                                                                                    
//13. Event Data Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                        
//14. Function Invocation  - T03                                                                                                                       
//15. Function Parameter Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                
//16. Bridge Invocation  - T04, T08                                                                                                                    
//17. Bridge Parameter Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                  
//18. Interface Operation Invocation  - T05, T09                                                                                                       
//19. Interface Operation Parameter Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                     
//20. Signal Invocation  - T05, T10                                                                                                                    
//21. Signal Parameter Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                  
//22. Relate  - T01, T12                                                                                                                               
//23. Unrelate  - T01, T12                                                                                                                             
//24. Relate Using  - T01, T12                                                                                                                         
//25. Unrelate Using  - T01, T12                                                                                                                       
//26. If Condition  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                            
//27. ElseIf Condition  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                        
//28. While Condition  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                         
//29. Return Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13                                                                            
//30. Array Index Value  - T01, T02, T03, T04, T05, T07, T08, T09, T11, T13

// Additional declarations
T01E01 = 1;
T01E02 = 1;
select any T01E03 from instances of testClass;
T01E04 = 1;
select any T01E05 from instances of testClass;
select any T01E06 from instances of class1;
T01E07 = 1;
select any testClass from instances of testClass;
select any testClassWithParameters from instances of testClassEventWithParameters;
create event instance T01E09 of testClass1:event1() to testClass;
T01E11 = 1;
select any T01E12 from instances of testClass;
T01E13 = 1;
T01E15 = 1;
T01E17 = 1;
T01E19 = 1;
T01E21 = 1;
select any T01E22 from instances of class2;
select any T01E23 from instances of class2;
select any T01E24 from instances of aone;
select any aoth from instances of aoth;
select any assr from instances of assr;
select any T01E25 from instances of assr;
T01E26 = 1;
T01E27 = 1;
T01E28 = 1;
T01E30 = 1;
select any class1 from instances of class1;
select any t06 from instances of T06class;
select any as1 from instances of as1;
select any as2 from instances of as2;
select any as3 from instances of as3;
select any as4 from instances of as4;
select any as5 from instances of as5;
select any as6 from instances of as6;
select any t13class from instances of T13class;

// T01 tests start here

// T01 E01
T01E01 = 1;
// T01 E02
x = T01E02;
// T01 E03
select any T01E03 from instances of testClass;
// T01 E04
select any foo from instances of testClass where ( T01E04 == 1 );
// T01 E05
create object instance T01E05 of testClass;
// T01 E06
select one foo2 related by T01E06->class2[R3];
// T01 E07
select one foo2 related by T01E06->class2[R3] where ( T01E07 == 1 );
// T01 E09
create event instance T01E09 of testClass1:event1() to testClass;
// T01 E11
testClass.testOperation( testParameter:T01E11 );
// T01 E12
generate testClass1:event1() to T01E12;
// T01 E13
generate testClassEventWithParameters1:evt( parameter:T01E13 ) to testClassWithParameters;
// T01 E15
x = ::testFunc( parameter:T01E15 );
// T01 E17
testEE::op( parameter:T01E17 );
// T01 E19
Port2::op_with_param( parameter:T01E19 );
// T01 E21
Port2::sig_with_param( parameter:T01E21 );
// T01 E22
relate T01E22 to T01E06 across R3;
// T01 E23
unrelate T01E23 from T01E06 across R3;
// T01 E24
relate T01E24 to aoth across R5 using assr;
// T01 E25
unrelate T01E24 from aoth across R5 using T01E25;
// T01 E26
if ( T01E26 == 1 ) x = 2;
// T01 E27
elif ( T01E27 == 1 ) x = 3; end if;
// T01 E28
while ( T01E28 == 1 ) x = 4; end while;
// T01 E30
new_array[T01E30] = 1;

// T02 tests start here

// T02 E02
x = T02E02::operation();
// T02 E03
select any foo3 from instances of T02E03;
// T02 E04
select any foo from instances of testClass where ( T02E04::testInt() == 1 );
// T02 E05
create object instance zz of T02E05;
// T02 E06
select one foo5 related by class1->T02E06[R6];
// T02 E07
select one foo4 related by class1->class2[R3] where ( T02E07::boolOp() );
// T02 E08
create object instance of T02E08;
// T02 E09
create event instance e of T02E09_A1:event1() to T02E09 class;
// T02 E10
T02E10::voidOp();
// T02 E11
testClass.testOperation( testParameter:T02E11::intOp() );
// T02 E12
generate T02E12_A1:event1() to T02E12 class;
// T02 E13
generate testClassEventWithParameters1:evt( parameter:T02E13::intOp() ) to testClassWithParameters;
// T02 E15
x = ::testFunc( parameter:T02E15::intOp() );
// T02 E17
testEE::op( parameter:T02E17::intOp() );
// T02 E19
Port2::op_with_param( parameter:T02E19::intOp() );
// T02 E21
Port2::sig_with_param( parameter:T02E21::intOp() );
// T02 E26
if ( T02E26::intOp() == 1 ) x = 2;
// T02 E27
elif ( T02E27::intOp() == 1 ) x = 3; end if;
// T02 E28
while ( T02E28::intOp() == 1 ) x = 4; end while;
// T02 E30
new_array[T02E30::intOp()] = 1;

// T03 tests start here

// T03 E02
x = ::T03E02();
// T03 E04
select any foo from instances of testClass where ( ::T03E04() == 1 );
// T03 E07
select one foo4 related by class1->class2[R3] where ( ::T03E07() == 1 );
// T03 E11
testClass.testOperation( testParameter: ::T03E11() );
// T03 E13
generate testClassEventWithParameters1:evt( parameter: ::T03E13() ) to testClassWithParameters;
// T03 E14
::T03E14();
// T03 E15
x = ::testFunc( parameter: ::T03E15() );
// T03 E17
testEE::op( parameter: ::T03E17() );
// T03 E19
Port2::op_with_param( parameter: ::T03E19() );
// T03 E21
Port2::sig_with_param( parameter: ::T03E21() );
// T03 E26
if ( ::T03E26() == 1 ) x = 2;
// T03 E27
elif ( ::T03E27() == 1 ) x = 3; end if;
// T03 E28
while ( ::T03E28() == 1 ) x = 4; end while;
// T03 E30
new_array[::T03E30()] = 1;

// T04 tests start here

// T04 E02
x = T04E02::intOp();
// T04 E04
select any foo from instances of testClass where ( T04E04::intOp() == 1 );
// T04 E07
select one foo4 related by class1->class2[R3] where ( T04E07::intOp() == 1 );
// T04 E11
testClass.testOperation( testParameter:T04E11::intOp() );
// T04 E13
generate testClassEventWithParameters1:evt( parameter:T04E13::intOp() ) to testClassWithParameters;
// T04 E15
x = ::testFunc( parameter:T04E15::intOp() );
// T04 E16
T04E16::voidOp();
// T04 E17
testEE::op( parameter:T04E17::intOp() );
// T04 E19
Port2::op_with_param( parameter:T04E19::intOp() );
// T04 E21
Port2::sig_with_param( parameter:T04E21::intOp() );
// T04 E26
if ( T04E26::intOp() == 1 ) x = 2;
// T04 E27
elif ( T04E27::intOp() == 1 ) x = 3; end if;
// T04 E28
while ( T04E28::intOp() == 1 ) x = 4; end while;
// T04 E30
new_array[T04E30::intOp()] = 1;

// T05 tests start here

// T05 E02
x = T05E02::intOp();
// T05 E04
select any foo from instances of testClass where ( T05E04::intOp() == 1 );
// T05 E07
select one foo4 related by class1->class2[R3] where ( T05E07::intOp() == 1 );
// T05 E11
testClass.testOperation( testParameter:T05E11::intOp() );
// T05 E13
generate testClassEventWithParameters1:evt( parameter:T05E13::intOp() ) to testClassWithParameters;
// T05 E15
x = ::testFunc( parameter:T05E15::intOp() );
// T05 E17
testEE::op( parameter:T05E17::intOp() );
// T05 E18
T05E18::voidOp();
// T05 E19
Port2::op_with_param( parameter:T05E19::intOp() );
// T05 E20
T05E20::voidOp();
// T05 E21
Port2::sig_with_param( parameter:T05E21::intOp() );
// T05 E26
if ( T05E26::intOp() == 1 ) x = 2;
// T05 E27
elif ( T05E27::intOp() == 1 ) x = 3; end if;
// T05 E28
while ( T05E28::intOp() == 1 ) x = 4; end while;
// T05 E30
new_array[T05E30::intOp()] = 1;

// T06 tests start here

// T06 E09
create event instance e of T06class1:T06E09() to t06;
// T06 E12
generate T06class2:T06E12() to t06;

// T07 tests start here

// T07 E02
x = T07class::T07E02();
// T07 E04
select any foo from instances of testClass where ( T07class::T07E04() == 1 );
// T07 E07
select one foo4 related by class1->class2[R3] where ( T07class::T07E07() == 1 );
// T07 E10
T07class::T07E10();
// T07 E11
testClass.testOperation( testParameter:T07class::T07E11() );
// T07 E13
generate testClassEventWithParameters1:evt( parameter:T07class::T07E13() ) to testClassWithParameters;
// T07 E15
x = ::testFunc( parameter:T07class::T07E15() );
// T07 E17
testEE::op( parameter:T07class::T07E17() );
// T07 E19
Port2::op_with_param( parameter:T07class::T07E19() );
// T07 E21
Port2::sig_with_param( parameter:T07class::T07E21() );
// T07 E26
if ( T07class::T07E26() == 1 ) x = 2;
// T07 E27
elif ( T07class::T07E27() == 1 ) x = 3; end if;
// T07 E28
while ( T07class::T07E28() == 1 ) x = 4; end while;
// T07 E30
new_array[T07class::T07E30()] = 1;

// T08 tests start here

// T08 E02
x = T08EE::T08E02();
// T08 E04
select any foo from instances of testClass where ( T08EE::T08E04() == 1 );
// T08 E07
select one foo4 related by class1->class2[R3] where ( T08EE::T08E07() == 1 );
// T08 E11
testClass.testOperation( testParameter:T08EE::T08E11() );
// T08 E13
generate testClassEventWithParameters1:evt( parameter:T08EE::T08E13() ) to testClassWithParameters;
// T08 E15
x = ::testFunc( parameter:T08EE::T08E15() );
// T08 E16
T08EE::T08E16();
// T08 E17
testEE::op( parameter:T08EE::T08E17() );
// T08 E19
Port2::op_with_param( parameter:T08EE::T08E19() );
// T08 E21
Port2::sig_with_param( parameter:T08EE::T08E21() );
// T08 E26
if ( T08EE::T08E26() == 1 ) x = 2;
// T08 E27
elif ( T08EE::T08E27() == 1 ) x = 3; end if;
// T08 E28
while ( T08EE::T08E28() == 1 ) x = 4; end while;
// T08 E30
new_array[T08EE::T08E30()] = 1;

// T09 tests start here

// T09 E02
x = T09T10Port::T09E02();
// T09 E04
select any foo from instances of testClass where ( T09T10Port::T09E04() == 1 );
// T09 E07
select one foo4 related by class1->class2[R3] where ( T09T10Port::T09E07() == 1 );
// T09 E11
testClass.testOperation( testParameter:T09T10Port::T09E11() );
// T09 E13
generate testClassEventWithParameters1:evt( parameter:T09T10Port::T09E13() ) to testClassWithParameters;
// T09 E15
x = ::testFunc( parameter:T09T10Port::T09E15() );
// T09 E17
testEE::op( parameter:T09T10Port::T09E17() );
// T09 E18
T09T10Port::T09E18();
// T09 E19
Port2::op_with_param( parameter:T09T10Port::T09E19() );
// T09 E21
Port2::sig_with_param( parameter:T09T10Port::T09E21() );
// T09 E26
if ( T09T10Port::T09E26() == 1 ) x = 2;
// T09 E27
elif ( T09T10Port::T09E27() == 1 ) x = 3; end if;
// T09 E28
while ( T09T10Port::T09E28() == 1 ) x = 4; end while;
// T09 E30
new_array[T09T10Port::T09E30()] = 1;

// T10 tests start here

// T10 E20
T09T10Port::T10E20();

// T11 tests start here

// T11 E02
x = param.T11E02;
// T11 E04
select any foo from instances of testClass where ( param.T11E04 == 1 );
// T11 E07
select one foo4 related by class1->class2[R3] where ( param.T11E07 == 1 );
// T11 E11
testClass.testOperation( testParameter:param.T11E11 );
// T11 E13
generate testClassEventWithParameters1:evt( parameter:param.T11E13 ) to testClassWithParameters;
// T11 E15
x = ::testFunc( parameter:param.T11E15 );
// T11 E17
testEE::op( parameter:param.T11E17 );
// T11 E19
Port2::op_with_param( parameter:param.T11E19 );
// T11 E21
Port2::sig_with_param( parameter:param.T11E21 );
// T11 E26
if ( param.T11E26 == 1 ) x = 2;
// T11 E27
elif ( param.T11E27 == 1 ) x = 3; end if;
// T11 E28
while ( param.T11E28 == 1 ) x = 4; end while;
// T11 E30
new_array[param.T11E30] = 1;

// T12 tests start here

// in this section, because of the inability to name
// relationships freeform, relationships have been
// numbered such that in each case, if ''R99'' is replaced
// by ''T12E'', the relationship specification will match
// the desired DOF selection

// T12 E06
select one as3 related by as1->as3[R9906];
// T12 E22
relate as1 to as2 across R9922;
// T12 E23
unrelate as2 from as3 across R9923;
// T12 E24
relate as3 to as4 across R9924 using as6;
// T12 E25
unrelate as2 from as4 across R9925 using as5;

// T13 tests start here

// T13 E01
t13class.T13E01 = 1;
// T13 E02
x = t13class.T13E02;
// T13 E04
select any foo from instances of testClass where ( t13class.T13E04 == 1 );
// T13 E07
select one foo4 related by class1->class2[R3] where ( t13class.T13E07 == 1 );
// T13 E11
testClass.testOperation( testParameter:t13class.T13E11 );
// T13 E12
generate t13class.T13E12;
// T13 E13
generate testClassEventWithParameters1:evt( parameter:t13class.T13E13 ) to testClassWithParameters;
// T13 E15
x = ::testFunc( parameter:t13class.T13E15 );
// T13 E17
testEE::op( parameter:t13class.T13E17 );
// T13 E19
Port2::op_with_param( parameter:t13class.T13E19 );
// T13 E21
Port2::sig_with_param( parameter:t13class.T13E21 );
// T13 E26
if ( t13class.T13E26 == 1 ) x = 2;
// T13 E27
elif ( t13class.T13E27 == 1 ) x = 3; end if;
// T13 E28
while ( t13class.T13E28 == 1 ) x = 4; end while;
// T13 E30
new_array[t13class.T13E30] = 1;',
	'',
	0);
INSERT INTO SM_TAH
	VALUES ("a9ee617e-205b-42e0-b855-b7c927e0018c",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	"d142f76c-e208-4135-aac7-d1e0ebd4aba0");
INSERT INTO SM_AH
	VALUES ("a9ee617e-205b-42e0-b855-b7c927e0018c",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2");
INSERT INTO SM_ACT
	VALUES ("a9ee617e-205b-42e0-b855-b7c927e0018c",
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	1,
	'',
	'',
	0);
INSERT INTO GD_MD
	VALUES ("1e6eaedf-f729-4942-8c0a-ad6231618520",
	8,
	"a0527bf6-4b66-48f0-ac4f-22a6e43214f2",
	40,
	0,
	0,
	1,
	1,
	1,
	12,
	1,
	0,
	0,
	200,
	150,
	0,
	'4.1.17',
	'oal_open_declarations::MainPackage::MainComponent::L06::L06::Instance State Machine');
INSERT INTO GD_GE
	VALUES ("d14d633d-62cf-44f0-87d2-e6a65e742397",
	"1e6eaedf-f729-4942-8c0a-ad6231618520",
	"904bf884-6eec-454f-a90e-c4f46350a326",
	41,
	0,
	'oal_open_declarations::MainPackage::MainComponent::L06::L06::Instance State Machine::L06');
INSERT INTO GD_SHP
	VALUES ("d14d633d-62cf-44f0-87d2-e6a65e742397");
INSERT INTO GD_NCS
	VALUES ("d14d633d-62cf-44f0-87d2-e6a65e742397");
INSERT INTO DIM_ND
	VALUES (200.000000,
	150.000000,
	"d14d633d-62cf-44f0-87d2-e6a65e742397");
INSERT INTO DIM_GE
	VALUES (24.000000,
	24.000000,
	"d14d633d-62cf-44f0-87d2-e6a65e742397",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d14d633d-62cf-44f0-87d2-e6a65e742397",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_CON
	VALUES ("075eace9-0e67-4a32-bcba-aa335e31ab0a",
	223.000000,
	131.000000,
	"d14d633d-62cf-44f0-87d2-e6a65e742397");
INSERT INTO DIM_CON
	VALUES ("59672175-b7f9-47b1-a38b-c5b74a6047ca",
	223.000000,
	71.000000,
	"d14d633d-62cf-44f0-87d2-e6a65e742397");
INSERT INTO GD_GE
	VALUES ("7fdd9b17-1255-4f86-b006-bcc04246f403",
	"1e6eaedf-f729-4942-8c0a-ad6231618520",
	"d142f76c-e208-4135-aac7-d1e0ebd4aba0",
	42,
	0,
	'oal_open_declarations::MainPackage::MainComponent::L06::L06::Instance State Machine::L06::L061: event1');
INSERT INTO GD_CON
	VALUES ("7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("fdf36a24-828a-4a51-a858-38b6800454c9",
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	1,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"fdf36a24-828a-4a51-a858-38b6800454c9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"fdf36a24-828a-4a51-a858-38b6800454c9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("fdf36a24-828a-4a51-a858-38b6800454c9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("f351bd42-b16d-4c67-a340-467b86aa77cd",
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	3,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"f351bd42-b16d-4c67-a340-467b86aa77cd");
INSERT INTO DIM_GE
	VALUES (279.000000,
	87.000000,
	"f351bd42-b16d-4c67-a340-467b86aa77cd",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("f351bd42-b16d-4c67-a340-467b86aa77cd",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_CTXT
	VALUES ("d7b207e0-1216-4f0d-b9f0-d227110954b9",
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	2,
	0.000000,
	0.000000);
INSERT INTO DIM_ND
	VALUES (0.000000,
	0.000000,
	"d7b207e0-1216-4f0d-b9f0-d227110954b9");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"d7b207e0-1216-4f0d-b9f0-d227110954b9",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("d7b207e0-1216-4f0d-b9f0-d227110954b9",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO GD_LS
	VALUES ("814f351e-5eb2-4a90-84e6-851732979705",
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000",
	"15554e2d-c847-44fd-a196-601a45ea03be",
	"40d2e664-923f-443b-933b-b5a3fe72cfbd");
INSERT INTO GD_LS
	VALUES ("8413f84b-f1e7-478f-890b-92b958269e65",
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"814f351e-5eb2-4a90-84e6-851732979705",
	"40d2e664-923f-443b-933b-b5a3fe72cfbd",
	"41c751a9-b3d4-45ed-8441-c88b096ce2c3");
INSERT INTO GD_LS
	VALUES ("ed5734c8-07d2-44cd-ad1a-7d9b0c044946",
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"8413f84b-f1e7-478f-890b-92b958269e65",
	"41c751a9-b3d4-45ed-8441-c88b096ce2c3",
	"5beb8d31-6339-4a40-a133-4962afb899d7");
INSERT INTO DIM_WAY
	VALUES ("15554e2d-c847-44fd-a196-601a45ea03be",
	223.000000,
	131.000000,
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("5beb8d31-6339-4a40-a133-4962afb899d7",
	223.000000,
	71.000000,
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000",
	"15554e2d-c847-44fd-a196-601a45ea03be");
INSERT INTO DIM_WAY
	VALUES ("40d2e664-923f-443b-933b-b5a3fe72cfbd",
	274.000000,
	131.000000,
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_WAY
	VALUES ("41c751a9-b3d4-45ed-8441-c88b096ce2c3",
	274.000000,
	71.000000,
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_GE
	VALUES (0.000000,
	0.000000,
	"7fdd9b17-1255-4f86-b006-bcc04246f403",
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ELE
	VALUES ("7fdd9b17-1255-4f86-b006-bcc04246f403",
	0,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO DIM_ED
	VALUES ("075eace9-0e67-4a32-bcba-aa335e31ab0a",
	"59672175-b7f9-47b1-a38b-c5b74a6047ca",
	"7fdd9b17-1255-4f86-b006-bcc04246f403");
INSERT INTO DIM_DIA
	VALUES ("1e6eaedf-f729-4942-8c0a-ad6231618520",
	'',
	1.000000,
	0.000000,
	0.000000,
	"00000000-0000-0000-0000-000000000000");
INSERT INTO O_OBJ_PROXY
	VALUES ("1120006e-eccb-4765-ac1f-4cdbb004e669",
	'L06',
	1,
	'L06',
	'',
	"00000000-0000-0000-0000-000000000000",
	'../L06.xtuml');
